#!/usr/bin/env python3
"""
Debug do Iron Condor Scanner para identificar problemas.
"""

import os
import sys
import traceback
import pandas as pd

# Adiciona o diret√≥rio do projeto ao path
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, PROJECT_ROOT)

def debug_iron_condor():
    """Debug do Iron Condor Scanner."""
    
    print("üîç Debug do Iron Condor Scanner...")
    print("=" * 60)
    
    try:
        # Carrega vari√°veis de ambiente
        print("1Ô∏è‚É£ Carregando vari√°veis de ambiente...")
        # As vari√°veis j√° est√£o carregadas pelo script bash
        print("‚úÖ Vari√°veis carregadas!")
        
        # Testa cliente OpLab
        print("\n2Ô∏è‚É£ Testando cliente OpLab...")
        from src.core.data.oplab_client import OpLabClient
        client = OpLabClient()
        print("‚úÖ Cliente inicializado!")
        
        # Testa ticker
        ticker = "PETR4"
        print(f"\n3Ô∏è‚É£ Testando ticker: {ticker}")
        
        # Busca pre√ßo
        try:
            price = client.get_underlying_price(ticker)
            print(f"‚úÖ Pre√ßo atual: R$ {price:.2f}")
        except Exception as e:
            print(f"‚ùå Erro ao buscar pre√ßo: {e}")
            return
        
        # Busca op√ß√µes
        try:
            option_chain = client.get_option_chain(ticker)
            print(f"‚úÖ Op√ß√µes encontradas: {len(option_chain)}")
            
            if option_chain.empty:
                print("‚ùå Nenhuma op√ß√£o encontrada!")
                return
            
            print(f"üìä Colunas dispon√≠veis: {list(option_chain.columns)}")
            print(f"üìä Tipos de op√ß√£o: {option_chain['option_type'].unique()}")
            print(f"üìä Vencimentos: {option_chain['expiration'].nunique()}")
            
            # Mostra algumas op√ß√µes
            print("\nüìã Primeiras 5 op√ß√µes:")
            print(option_chain.head()[['symbol', 'option_type', 'strike', 'expiration', 'bid', 'ask', 'last']])
            
        except Exception as e:
            print(f"‚ùå Erro ao buscar op√ß√µes: {e}")
            traceback.print_exc()
            return
        
        # Testa filtro de vencimento
        print(f"\n4Ô∏è‚É£ Testando filtro de vencimento (30 dias)...")
        from datetime import datetime, timedelta
        
        option_chain['expiration'] = pd.to_datetime(option_chain['expiration'])
        cutoff_date = datetime.now() + timedelta(days=30)
        filtered_options = option_chain[option_chain['expiration'] <= cutoff_date]
        
        print(f"‚úÖ Op√ß√µes com vencimento <= 30 dias: {len(filtered_options)}")
        
        if filtered_options.empty:
            print("‚ùå Nenhuma op√ß√£o com vencimento adequado!")
            return
        
        # Testa separa√ß√£o CALL/PUT
        print(f"\n5Ô∏è‚É£ Testando separa√ß√£o CALL/PUT...")
        calls = filtered_options[filtered_options['option_type'] == 'CALL']
        puts = filtered_options[filtered_options['option_type'] == 'PUT']
        
        print(f"‚úÖ CALLs: {len(calls)}")
        print(f"‚úÖ PUTs: {len(puts)}")
        
        if calls.empty or puts.empty:
            print("‚ùå Faltam CALLs ou PUTs!")
            return
        
        # Testa c√°lculo de probabilidade
        print(f"\n6Ô∏è‚É£ Testando c√°lculo de probabilidade...")
        from scipy.stats import norm
        import numpy as np
        
        # Testa com range simples
        range_bounds = [price * 0.95, price * 1.05]  # ¬±5% do pre√ßo atual
        iv = 0.30  # 30% volatilidade
        days_to_exp = 30
        
        time_to_exp = days_to_exp / 365.0
        sigma = iv * np.sqrt(time_to_exp)
        
        log_lower = np.log(range_bounds[0] / price) / sigma
        log_upper = np.log(range_bounds[1] / price) / sigma
        
        prob_lower = norm.cdf(log_lower)
        prob_upper = norm.cdf(log_upper)
        probability = prob_upper - prob_lower
        
        print(f"‚úÖ Probabilidade para range ¬±5%: {probability:.1%}")
        
        # Testa scanner
        print(f"\n7Ô∏è‚É£ Testando scanner...")
        from src.features.radar.iron_condor_scanner import IronCondorScanner
        
        scanner = IronCondorScanner(client, min_probability=0.60)  # Reduz probabilidade m√≠nima
        
        try:
            opportunities = scanner.scan_iron_condor_opportunities(ticker, max_days=60)
            print(f"‚úÖ Scanner executado: {len(opportunities)} oportunidades")
            
            if opportunities:
                print("üéØ Primeira oportunidade:")
                opp = opportunities[0]
                for key, value in opp.items():
                    print(f"   {key}: {value}")
            else:
                print("‚ùå Nenhuma oportunidade encontrada!")
                
                # Debug mais profundo
                print("\nüîç Debug mais profundo...")
                print(f"   - Probabilidade m√≠nima: {scanner.min_probability}")
                print(f"   - Vencimento m√°ximo: 60 dias")
                print(f"   - CALLs dispon√≠veis: {len(calls)}")
                print(f"   - PUTs dispon√≠veis: {len(puts)}")
                
        except Exception as e:
            print(f"‚ùå Erro no scanner: {e}")
            traceback.print_exc()
        
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        traceback.print_exc()


if __name__ == "__main__":
    debug_iron_condor()
