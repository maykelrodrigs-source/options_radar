"""
M√≥dulo de dados hist√≥ricos - DADOS REAIS via Yahoo Finance
Integra√ß√£o com yfinance para dados hist√≥ricos da B3
"""

import pandas as pd
import yfinance as yf
import logging
from datetime import datetime, timedelta
from typing import Optional

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def _convert_ticker_to_yfinance(ticker: str) -> str:
    """
    Converte ticker brasileiro para formato Yahoo Finance.
    
    Args:
        ticker: Ticker brasileiro (ex: PETR4)
        
    Returns:
        Ticker no formato Yahoo Finance (ex: PETR4.SA)
    """
    ticker = ticker.upper().strip()
    if not ticker.endswith('.SA'):
        ticker += '.SA'
    return ticker


def get_price_history(ticker: str, history_days: int) -> pd.DataFrame:
    """
    Busca dados hist√≥ricos REAIS via Yahoo Finance.
    
    Args:
        ticker: C√≥digo da a√ß√£o (ex: PETR4)
        history_days: N√∫mero de dias de hist√≥rico
        
    Returns:
        DataFrame com dados hist√≥ricos REAIS
    """
    try:
        logger.info(f"üìä Buscando dados hist√≥ricos REAIS para {ticker} via Yahoo Finance")
        
        # Converte ticker para formato Yahoo Finance
        yf_ticker = _convert_ticker_to_yfinance(ticker)
        
        # Calcula per√≠odo baseado em dias √∫teis (aproximadamente)
        # Adiciona 40% para compensar fins de semana e feriados
        period_days = int(history_days * 1.4)
        
        # Busca dados do Yahoo Finance
        stock = yf.Ticker(yf_ticker)
        hist = stock.history(period=f"{period_days}d")
        
        if hist.empty:
            logger.error(f"‚ùå Yahoo Finance n√£o retornou dados para {yf_ticker}")
            return pd.DataFrame(columns=['date', 'open', 'high', 'low', 'close', 'volume'])
        
        # Converte para formato esperado pelo sistema
        df = pd.DataFrame({
            'date': hist.index,
            'open': hist['Open'],
            'high': hist['High'], 
            'low': hist['Low'],
            'close': hist['Close'],
            'volume': hist['Volume']
        })
        
        # Garante que temos pelo menos os dias solicitados
        df = df.tail(history_days).reset_index(drop=True)
        
        logger.info(f"‚úÖ Dados hist√≥ricos REAIS obtidos para {ticker}: {len(df)} registros")
        logger.info(f"üìÖ Per√≠odo: {df['date'].iloc[0].date()} a {df['date'].iloc[-1].date()}")
        logger.info(f"üí∞ Pre√ßo: R$ {df['close'].iloc[0]:.2f} ‚Üí R$ {df['close'].iloc[-1]:.2f}")
        
        return df
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao buscar dados hist√≥ricos para {ticker}: {e}")
        return pd.DataFrame(columns=['date', 'open', 'high', 'low', 'close', 'volume'])


def get_historical_data(ticker: str, start_date: str, end_date: str) -> pd.DataFrame:
    """
    Busca dados hist√≥ricos REAIS por per√≠odo espec√≠fico.
    
    Args:
        ticker: C√≥digo da a√ß√£o
        start_date: Data inicial (YYYY-MM-DD)
        end_date: Data final (YYYY-MM-DD)
        
    Returns:
        DataFrame com dados hist√≥ricos REAIS
    """
    try:
        logger.info(f"üìä Buscando dados hist√≥ricos REAIS para {ticker}: {start_date} a {end_date}")
        
        # Converte ticker para formato Yahoo Finance
        yf_ticker = _convert_ticker_to_yfinance(ticker)
        
        # Busca dados do Yahoo Finance
        stock = yf.Ticker(yf_ticker)
        hist = stock.history(start=start_date, end=end_date)
        
        if hist.empty:
            logger.error(f"‚ùå Yahoo Finance n√£o retornou dados para {yf_ticker}")
            return pd.DataFrame(columns=['date', 'open', 'high', 'low', 'close', 'volume'])
        
        # Converte para formato esperado pelo sistema
        df = pd.DataFrame({
            'date': hist.index,
            'open': hist['Open'],
            'high': hist['High'],
            'low': hist['Low'], 
            'close': hist['Close'],
            'volume': hist['Volume']
        })
        
        df = df.reset_index(drop=True)
        
        logger.info(f"‚úÖ Dados hist√≥ricos REAIS obtidos para {ticker}: {len(df)} registros")
        
        return df
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao buscar dados hist√≥ricos para {ticker}: {e}")
        return pd.DataFrame(columns=['date', 'open', 'high', 'low', 'close', 'volume'])


# Inst√¢ncia global para compatibilidade
oplab_data_provider = None

# Exports
__all__ = [
    'get_price_history',
    'get_historical_data', 
    'oplab_data_provider'
]