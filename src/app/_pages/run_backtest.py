"""
Interface Streamlit para execu√ß√£o e visualiza√ß√£o de backtests.
Permite configurar par√¢metros e visualizar resultados interativamente.
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import plotly.graph_objects as go
from typing import Optional

from src.core.backtesting.backtest import BacktestEngine, BacktestResult, BacktestProfessionalAnalyzer
from src.core.data.data import get_historical_data_cached
from src.core.backtesting.plots import BacktestPlotter, create_all_plots


def render_backtest_page():
    """Renderiza a p√°gina principal do backtest."""
    st.title("üî¨ Backtest do ProfessionalAnalyzer")
    st.markdown("Valide a efic√°cia do analisador profissional em dados hist√≥ricos")
    
    # Sidebar com par√¢metros
    with st.sidebar:
        st.header("‚öôÔ∏è Configura√ß√µes")
        
        # Par√¢metros b√°sicos
        ticker = st.text_input(
            "Ticker",
            value="ITUB4",
            help="C√≥digo do ativo para an√°lise"
        ).strip().upper()
        
        # Horizonte temporal
        st.subheader("‚è±Ô∏è Horizonte Temporal")
        horizon = st.selectbox(
            "Horizonte de an√°lise t√©cnica",
            options=["curto", "m√©dio", "longo"],
            index=0,  # Default: "curto"
            help="Define os par√¢metros dos indicadores t√©cnicos (SMA, RSI, MACD)"
        )
        
        # Per√≠odo do backtest
        st.subheader("üìÖ Per√≠odo")
        
        col1, col2 = st.columns(2)
        with col1:
            years_back = st.selectbox(
                "Per√≠odo",
                options=[1, 2, 3, 5],
                index=1,  # Default: 2 anos
                help="Anos de hist√≥rico para backtest"
            )
        
        with col2:
            end_date = st.date_input(
                "Data final",
                value=datetime.now().date(),
                help="Data final do backtest"
            )
        
        start_date = datetime.combine(end_date, datetime.min.time()) - timedelta(days=years_back * 365)
        
        # Par√¢metros de an√°lise
        st.subheader("üéØ Par√¢metros")
        
        evaluation_days = st.slider(
            "Dias para avalia√ß√£o",
            min_value=5,
            max_value=60,
            value=10,
            step=5,
            help="Dias √∫teis para verificar se sinal acertou"
        )
        
        rolling_window = st.slider(
            "Intervalo entre an√°lises",
            min_value=1,
            max_value=15,
            value=5,
            step=1,
            help="Dias √∫teis entre cada an√°lise"
        )
        
        success_threshold = st.slider(
            "Threshold de sucesso (%)",
            min_value=1.0,
            max_value=10.0,
            value=3.0,
            step=0.5,
            help="Varia√ß√£o m√≠nima para considerar acerto"
        )
        
        # Bot√µes de execu√ß√£o
        col1, col2 = st.columns([2, 1])
        with col1:
            run_backtest = st.button(
                "üöÄ Executar Backtest",
                type="primary",
                help="Inicia o backtest com os par√¢metros configurados"
            )
        with col2:
            if st.button("üóëÔ∏è Limpar", help="Limpa resultado anterior"):
                if 'backtest_result' in st.session_state:
                    del st.session_state['backtest_result']
                if 'backtest_params' in st.session_state:
                    del st.session_state['backtest_params']
                st.rerun()
    
    # Verifica se deve executar novo backtest
    should_run_backtest = False
    
    if run_backtest:
        # Valida√ß√µes antes de executar
        if not ticker:
            st.error("‚ùå Digite um ticker v√°lido")
            return
        
        if years_back < 1:
            st.error("‚ùå Per√≠odo deve ser pelo menos 1 ano")
            return
            
        should_run_backtest = True
    
    # Verifica se j√° existe resultado na sess√£o
    has_existing_result = (
        'backtest_result' in st.session_state and 
        st.session_state['backtest_result'] is not None
    )
    
    # √Årea principal - decide o que mostrar
    if should_run_backtest:
        # Executa novo backtest
        with st.spinner(f"üîç Executando backtest para {ticker}..."):
            try:
                # Configura analisador com defaults otimizados para curto prazo
                analyzer = BacktestProfessionalAnalyzer(horizon=horizon)
                analyzer.decision_threshold = 0.22
                analyzer.layer_weights = {
                    'trend': 0.30,
                    'momentum': 0.30,
                    'volume': 0.20,
                    'sentiment': 0.15,
                    'macro': 0.05
                }

                engine = BacktestEngine(
                    success_threshold=success_threshold,
                    horizon=horizon,
                    data_provider=get_historical_data_cached,
                    analyzer=analyzer
                )
                
                result = engine.run_backtest(
                    ticker=ticker,
                    start_date=start_date,
                    end_date=datetime.combine(end_date, datetime.min.time()),
                    evaluation_days=evaluation_days,
                    rolling_window=rolling_window
                )
                
                # Salva resultado na sess√£o para reutiliza√ß√£o
                st.session_state['backtest_result'] = result
                st.session_state['backtest_params'] = {
                    'ticker': ticker,
                    'horizon': horizon,
                    'start_date': start_date,
                    'end_date': end_date,
                    'evaluation_days': evaluation_days,
                    'rolling_window': rolling_window,
                    'success_threshold': success_threshold
                }
                
            except Exception as e:
                st.error(f"‚ùå Erro ao executar backtest: {e}")
                st.exception(e)
                return
        
        # Renderiza resultados do novo backtest
        render_results_section(result)
        
    elif has_existing_result:
        # Mostra resultado existente
        result = st.session_state['backtest_result']
        params = st.session_state.get('backtest_params', {})
        
        # Mostra informa√ß√µes do backtest existente
        ticker_info = params.get('ticker', 'N/A')
        horizon_info = params.get('horizon', 'N/A')
        start_info = params.get('start_date', datetime.now()).strftime('%d/%m/%Y') if params.get('start_date') else 'N/A'
        end_info = params.get('end_date', datetime.now()).strftime('%d/%m/%Y') if params.get('end_date') else 'N/A'
        
        st.info(f"üìä Mostrando resultado do backtest anterior: **{ticker_info}** ({horizon_info}) | {start_info} a {end_info}")
        st.caption("üí° Para executar novo backtest, altere os par√¢metros e clique em 'Executar Backtest' ou clique em 'Limpar' para remover este resultado.")
        
        # Renderiza resultados existentes
        render_results_section(result)
        
    else:
        # Mostra tela de boas-vindas
        render_welcome_section(ticker, start_date, datetime.combine(end_date, datetime.min.time()), horizon)


def render_welcome_section(ticker: str, start_date: datetime, end_date: datetime, horizon: str = "m√©dio"):
    """Renderiza se√ß√£o de boas-vindas com preview dos par√¢metros."""
    st.info("üëã Configure os par√¢metros na barra lateral e clique em 'Executar Backtest'")
    
    # Preview dos par√¢metros
    with st.expander("üëÄ Preview dos Par√¢metros", expanded=True):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Ticker", ticker)
            st.metric("Horizonte", horizon.title())
        
        with col2:
            st.metric("Data Inicial", start_date.strftime('%d/%m/%Y'))
            st.metric("Data Final", end_date.strftime('%d/%m/%Y'))
        
        with col3:
            st.metric("Per√≠odo", f"{(end_date - start_date).days} dias")
            st.metric("Threshold", "3.0% (padr√£o)")
    
    # Explica√ß√£o do processo
    st.markdown("---")
    st.markdown("### üî¨ Como Funciona o Backtest")
    
    st.markdown("""
    **1. üìä Coleta de Dados**
    - Busca hist√≥rico de pre√ßos do ticker selecionado
    - Simula dados baseados em padr√µes realistas de mercado
    
    **2. üéØ Gera√ß√£o de Sinais**
    - Executa ProfessionalAnalyzer com horizonte configurado
    - Gera sinais CALL/PUT/NEUTRAL com n√≠veis de confian√ßa
    - Registra drivers principais de cada decis√£o
    
    **3. ‚úÖ Valida√ß√£o**
    - **CALL**: Acerto se pre√ßo subiu > +{threshold}% no horizonte
    - **PUT**: Acerto se pre√ßo caiu > -{threshold}% no horizonte  
    - **NEUTRAL**: Acerto se pre√ßo ficou entre ¬±{threshold}%
    
    **4. üìà An√°lise**
    - Calcula taxa de acerto geral e por tipo de sinal
    - Analisa performance por n√≠vel de confian√ßa
    - Gera visualiza√ß√µes interativas dos resultados
    """.format(threshold="3.0"))
    
    # Informa√ß√µes sobre horizontes
    st.markdown("### ‚è±Ô∏è Horizontes Temporais")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        **üìà Curto (1-3 meses)**
        - SMA: 5/20/50/100
        - RSI: 7/14/21
        - MACD: 8/17/9
        - Foco: Movimentos r√°pidos
        """)
    
    with col2:
        st.markdown("""
        **üìä M√©dio (3-6 meses)**
        - SMA: 10/50/100/200
        - RSI: 7/14/21
        - MACD: 12/26/9
        - Foco: Tend√™ncias estruturais
        """)
    
    with col3:
        st.markdown("""
        **üìâ Longo (6+ meses)**
        - SMA: 20/50/100/200
        - RSI: 14/21/28
        - MACD: 12/26/9
        - Foco: Ciclos de mercado
        """)
    
    # Exemplos de resultados esperados
    st.markdown("### üìã Exemplo de Resultados")
    
    sample_data = {
        'Data': ['01/05/2023', '15/06/2023', '10/07/2023', '01/08/2023'],
        'Sinal': ['CALL', 'PUT', 'NEUTRAL', 'CALL'],
        'Confian√ßa (%)': ['75%', '68%', '45%', '82%'],
        'Pre√ßo Inicial': ['R$ 28,50', 'R$ 31,20', 'R$ 27,00', 'R$ 28,00'],
        'Pre√ßo +20d': ['R$ 29,90', 'R$ 30,10', 'R$ 27,40', 'R$ 26,50'],
        'Retorno (%)': ['+4.9%', '-3.5%', '+1.5%', '-5.4%'],
        'Resultado': ['‚úÖ Acerto', '‚úÖ Acerto', '‚úÖ Acerto', '‚ùå Erro']
    }
    
    sample_df = pd.DataFrame(sample_data)
    st.dataframe(sample_df, hide_index=True)


def render_results_section(result: BacktestResult):
    """Renderiza se√ß√£o completa de resultados."""
    if result.total_signals == 0:
        st.warning("‚ö†Ô∏è Nenhum sinal foi gerado no per√≠odo especificado")
        st.info("üí° Tente ajustar os par√¢metros: per√≠odo maior, threshold menor ou intervalo menor")
        return
    
    # Header com estat√≠sticas principais
    render_stats_header(result)
    
    # Abas de visualiza√ß√£o
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìä Resumo", 
        "üìà Sinais vs Pre√ßo", 
        "üéØ An√°lise Detalhada", 
        "üìã Tabela de Sinais",
        "üìÅ Exportar Dados"
    ])
    
    with tab1:
        render_summary_tab(result)
    
    with tab2:
        render_signals_chart_tab(result)
    
    with tab3:
        render_detailed_analysis_tab(result)
    
    with tab4:
        render_signals_table_tab(result)
    
    with tab5:
        render_export_tab(result)


def render_stats_header(result: BacktestResult):
    """Renderiza header com estat√≠sticas principais."""
    st.success(f"‚úÖ Backtest conclu√≠do para **{result.ticker}**")
    
    # M√©tricas principais
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric(
            "Total de Sinais",
            result.total_signals,
            help="N√∫mero total de sinais gerados"
        )
    
    with col2:
        accuracy_color = "normal"
        if result.overall_accuracy >= 60:
            accuracy_color = "inverse"
        elif result.overall_accuracy < 40:
            accuracy_color = "off"
            
        st.metric(
            "Acur√°cia Geral",
            f"{result.overall_accuracy:.1f}%",
            help="Percentual de sinais que acertaram a dire√ß√£o"
        )
    
    with col3:
        st.metric(
            "Per√≠odo",
            f"{(result.end_date - result.start_date).days}d",
            help="Per√≠odo total do backtest"
        )
    
    with col4:
        st.metric(
            "Avalia√ß√£o",
            f"{result.evaluation_days}d",
            help="Dias √∫teis para validar cada sinal"
        )
    
    with col5:
        # Performance rating
        if result.overall_accuracy >= 60:
            performance = "üéâ Excelente"
        elif result.overall_accuracy >= 50:
            performance = "üëç Boa"
        elif result.overall_accuracy >= 40:
            performance = "‚ö†Ô∏è Regular"
        else:
            performance = "‚ùå Precisa Melhorar"
        
        st.metric(
            "Performance",
            performance,
            help="Avalia√ß√£o qualitativa da performance"
        )


def render_summary_tab(result: BacktestResult):
    """Renderiza aba de resumo."""
    st.subheader("üìä Estat√≠sticas Detalhadas")
    
    # Acur√°cia por tipo de sinal
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üéØ Acur√°cia por Sinal**")
        
        signal_data = {
            'Sinal': ['CALL', 'PUT', 'NEUTRAL'],
            'Quantidade': [result.call_signals, result.put_signals, result.neutral_signals],
            'Acur√°cia (%)': [f"{result.call_accuracy:.1f}%", f"{result.put_accuracy:.1f}%", f"{result.neutral_accuracy:.1f}%"]
        }
        
        signal_df = pd.DataFrame(signal_data)
        st.dataframe(signal_df, hide_index=True)
    
    with col2:
        st.markdown("**üéØ Acur√°cia por Confian√ßa**")
        
        high_count = len([s for s in result.signals if s.confidence >= 70])
        medium_count = len([s for s in result.signals if 50 <= s.confidence < 70])
        low_count = len([s for s in result.signals if s.confidence < 50])
        
        conf_data = {
            'N√≠vel': ['Alta (‚â•70%)', 'M√©dia (50-69%)', 'Baixa (<50%)'],
            'Quantidade': [high_count, medium_count, low_count],
            'Acur√°cia (%)': [
                f"{result.high_confidence_accuracy:.1f}%",
                f"{result.medium_confidence_accuracy:.1f}%", 
                f"{result.low_confidence_accuracy:.1f}%"
            ]
        }
        
        conf_df = pd.DataFrame(conf_data)
        st.dataframe(conf_df, hide_index=True)
    
    # Insights autom√°ticos
    st.markdown("---")
    st.subheader("üîç Insights Autom√°ticos")
    
    insights = generate_insights(result)
    for insight in insights:
        if insight['type'] == 'success':
            st.success(f"‚úÖ {insight['message']}")
        elif insight['type'] == 'warning':
            st.warning(f"‚ö†Ô∏è {insight['message']}")
        elif insight['type'] == 'info':
            st.info(f"üí° {insight['message']}")


def render_signals_chart_tab(result: BacktestResult):
    """Renderiza aba com gr√°fico de sinais vs pre√ßo."""
    st.subheader("üìà Sinais vs Movimento do Pre√ßo")
    
    plotter = BacktestPlotter()
    fig = plotter.plot_price_with_signals(result)
    st.plotly_chart(fig, use_container_width=True)
    
    # Timeline de performance
    st.subheader("‚è±Ô∏è Performance ao Longo do Tempo")
    timeline_fig = plotter.plot_timeline_performance(result)
    st.plotly_chart(timeline_fig, use_container_width=True)


def render_detailed_analysis_tab(result: BacktestResult):
    """Renderiza aba com an√°lises detalhadas."""
    plotter = BacktestPlotter()
    
    # Breakdown de acur√°cia
    st.subheader("üéØ Breakdown de Acur√°cia")
    accuracy_fig = plotter.plot_accuracy_breakdown(result)
    st.plotly_chart(accuracy_fig, use_container_width=True)
    
    # Distribui√ß√£o de retornos
    st.subheader("üìä Distribui√ß√£o de Retornos")
    returns_fig = plotter.plot_returns_distribution(result)
    st.plotly_chart(returns_fig, use_container_width=True)
    
    # Confian√ßa vs Acur√°cia
    st.subheader("üéØ Confian√ßa vs Resultado")
    conf_fig = plotter.plot_confidence_vs_accuracy(result)
    st.plotly_chart(conf_fig, use_container_width=True)


def render_signals_table_tab(result: BacktestResult):
    """Renderiza aba com tabela de sinais."""
    st.subheader("üìã Tabela Completa de Sinais")
    
    # Filtros
    col1, col2, col3 = st.columns(3)
    
    with col1:
        signal_filter = st.selectbox(
            "Filtrar por sinal",
            options=['Todos', 'CALL', 'PUT', 'NEUTRAL'],
            index=0
        )
    
    with col2:
        result_filter = st.selectbox(
            "Filtrar por resultado",
            options=['Todos', 'Acertos', 'Erros'],
            index=0
        )
    
    with col3:
        confidence_filter = st.selectbox(
            "Filtrar por confian√ßa",
            options=['Todos', 'Alta (‚â•70%)', 'M√©dia (50-69%)', 'Baixa (<50%)'],
            index=0
        )
    
    # Aplica filtros
    filtered_signals = result.signals.copy()
    
    if signal_filter != 'Todos':
        filtered_signals = [s for s in filtered_signals if s.signal.value == signal_filter]
    
    if result_filter == 'Acertos':
        filtered_signals = [s for s in filtered_signals if s.is_correct]
    elif result_filter == 'Erros':
        filtered_signals = [s for s in filtered_signals if not s.is_correct]
    
    if confidence_filter == 'Alta (‚â•70%)':
        filtered_signals = [s for s in filtered_signals if s.confidence >= 70]
    elif confidence_filter == 'M√©dia (50-69%)':
        filtered_signals = [s for s in filtered_signals if 50 <= s.confidence < 70]
    elif confidence_filter == 'Baixa (<50%)':
        filtered_signals = [s for s in filtered_signals if s.confidence < 50]
    
    # Cria DataFrame
    if filtered_signals:
        data = []
        for signal in filtered_signals:
            data.append({
                'Data': signal.date.strftime('%d/%m/%Y'),
                'Sinal': signal.signal.value,
                'Confian√ßa (%)': f"{signal.confidence:.0f}%",
                'Pre√ßo Inicial': f"R$ {signal.price_at_signal:.2f}",
                f'Pre√ßo +{result.evaluation_days}d': f"R$ {signal.price_after_horizon:.2f}",
                'Retorno (%)': f"{signal.return_pct:+.1f}%",
                'Resultado': "‚úÖ Acerto" if signal.is_correct else "‚ùå Erro",
                'Drivers': ", ".join(signal.drivers[:3])  # Primeiros 3 drivers
            })
        
        df = pd.DataFrame(data)
        
        st.caption(f"Mostrando {len(df)} de {len(result.signals)} sinais")
        st.dataframe(df, hide_index=True)
    else:
        st.info("Nenhum sinal encontrado com os filtros aplicados")


def render_export_tab(result: BacktestResult):
    """Renderiza aba de exporta√ß√£o."""
    st.subheader("üìÅ Exportar Resultados")
    
    # Op√ß√µes de exporta√ß√£o
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üìä Dados**")
        
        if st.button("üìã Baixar Tabela (CSV)", type="secondary"):
            engine = BacktestEngine()
            df = engine.export_signals_to_dataframe(result)
            csv = df.to_csv(index=False)
            
            st.download_button(
                label="üíæ Download CSV",
                data=csv,
                file_name=f"backtest_{result.ticker}_{result.start_date.strftime('%Y%m%d')}.csv",
                mime="text/csv"
            )
    
    with col2:
        st.markdown("**üìà Gr√°ficos**")
        st.info("üí° Use o bot√£o de c√¢mera nos gr√°ficos para salvar como PNG")
    
    # Resumo para relat√≥rio
    st.markdown("---")
    st.subheader("üìÑ Resumo Executivo")
    
    summary_text = generate_executive_summary(result)
    st.text_area(
        "Copie este resumo para seus relat√≥rios:",
        value=summary_text,
        height=200,
        help="Resumo formatado para copiar e colar em relat√≥rios"
    )


def generate_insights(result: BacktestResult) -> list:
    """Gera insights autom√°ticos baseados nos resultados."""
    insights = []
    
    # Insight sobre performance geral
    if result.overall_accuracy >= 60:
        insights.append({
            'type': 'success',
            'message': f"Performance excelente com {result.overall_accuracy:.1f}% de acur√°cia. O modelo est√° funcionando bem!"
        })
    elif result.overall_accuracy >= 50:
        insights.append({
            'type': 'info',
            'message': f"Performance boa com {result.overall_accuracy:.1f}% de acur√°cia. H√° espa√ßo para otimiza√ß√£o."
        })
    else:
        insights.append({
            'type': 'warning',
            'message': f"Performance de {result.overall_accuracy:.1f}% indica necessidade de ajustes no modelo."
        })
    
    # Insight sobre confian√ßa
    if result.high_confidence_accuracy > result.overall_accuracy + 10:
        insights.append({
            'type': 'success',
            'message': "Sinais de alta confian√ßa t√™m performance significativamente melhor. Considere usar apenas sinais ‚â•70%."
        })
    
    # Insight sobre tipos de sinal
    best_signal = max(['CALL', 'PUT', 'NEUTRAL'], 
                     key=lambda x: getattr(result, f"{x.lower()}_accuracy"))
    best_accuracy = getattr(result, f"{best_signal.lower()}_accuracy")
    
    if best_accuracy > result.overall_accuracy + 15:
        insights.append({
            'type': 'info',
            'message': f"Sinais {best_signal} t√™m melhor performance ({best_accuracy:.1f}%). Considere focar neste tipo."
        })
    
    # Insight sobre quantidade de sinais
    if result.total_signals < 10:
        insights.append({
            'type': 'warning',
            'message': "Poucos sinais gerados. Considere aumentar o per√≠odo ou diminuir o intervalo entre an√°lises."
        })
    
    return insights


def generate_executive_summary(result: BacktestResult) -> str:
    """Gera resumo executivo formatado."""
    return f"""
BACKTEST DO PROFESSIONALANALYZER - {result.ticker}
{'='*50}

PER√çODO: {result.start_date.strftime('%d/%m/%Y')} a {result.end_date.strftime('%d/%m/%Y')}
HORIZONTE: {result.evaluation_days} dias √∫teis
THRESHOLD: ¬±3.0%

RESULTADOS PRINCIPAIS:
‚Ä¢ Total de sinais: {result.total_signals}
‚Ä¢ Acur√°cia geral: {result.overall_accuracy:.1f}%
‚Ä¢ CALL: {result.call_accuracy:.1f}% ({result.call_signals} sinais)
‚Ä¢ PUT: {result.put_accuracy:.1f}% ({result.put_signals} sinais)
‚Ä¢ NEUTRAL: {result.neutral_accuracy:.1f}% ({result.neutral_signals} sinais)

PERFORMANCE POR CONFIAN√áA:
‚Ä¢ Alta confian√ßa (‚â•70%): {result.high_confidence_accuracy:.1f}%
‚Ä¢ M√©dia confian√ßa (50-69%): {result.medium_confidence_accuracy:.1f}%
‚Ä¢ Baixa confian√ßa (<50%): {result.low_confidence_accuracy:.1f}%

CONCLUS√ÉO:
{'Modelo apresenta performance excelente' if result.overall_accuracy >= 60 
 else 'Modelo apresenta performance satisfat√≥ria' if result.overall_accuracy >= 50 
 else 'Modelo necessita ajustes para melhor performance'}

Gerado em: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}
    """.strip()


if __name__ == "__main__":
    st.set_page_config(
        page_title="Backtest ProfessionalAnalyzer",
        page_icon="üî¨",
        layout="wide"
    )
    
    render_backtest_page()
