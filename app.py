import os
import streamlit as st
import pandas as pd

from oplab_client import OpLabClient
from synthetic_dividends import find_synthetic_dividend_options
from direction_radar import render_direction_radar_page


st.set_page_config(page_title="Options Radar", layout="wide")
st.title("üéØ Options Radar")

# Cria abas
tab1, tab2 = st.tabs(["üí∞ Dividendos Sint√©ticos", "üìà Radar de Dire√ß√£o"])

with tab1:
    st.markdown("### Estrat√©gia de Dividendos Sint√©ticos")
    st.markdown("Busca op√ß√µes para estrat√©gia de dividendos sint√©ticos")

    def render_params_form():
        with st.form("params_form"):
            st.subheader("Par√¢metros de busca")
            ticker = st.text_input("Ticker (ex.: PETR4)", value="PETR4").strip().upper()

            col1, col2, col3 = st.columns(3)
            with col1:
                min_volume = st.number_input("Contratos ativos (min)", min_value=0, value=10, step=5, help="Quantidade m√≠nima de contratos ativos para filtro de liquidez")
            with col2:
                min_days = st.number_input("Prazo m√≠nimo (dias)", min_value=7, max_value=365, value=15, step=1, help="M√≠nimo 7 dias para evitar op√ß√µes muito pr√≥ximas do vencimento")
            with col3:
                max_days = st.number_input("Prazo m√°ximo (dias)", min_value=1, max_value=365, value=45, step=1)
            

            st.markdown("CALL coberta")
            c1, c2 = st.columns(2)
            with c1:
                call_min_distance = st.number_input("CALL: dist√¢ncia m√≠nima (%)", min_value=0.0, value=15.0, step=0.5)
            with c2:
                call_max_delta = st.number_input("CALL: delta m√°ximo", min_value=0.0, max_value=1.0, value=0.20, step=0.01, format="%.2f")

            st.markdown("PUT coberta")
            p1, p2 = st.columns(2)
            with p1:
                put_max_distance = st.number_input("PUT: dist√¢ncia m√°xima (%)", min_value=0.0, max_value=100.0, value=10.0, step=0.5, help="Dist√¢ncia m√°xima abaixo do pre√ßo atual")
            with p2:
                put_min_delta = st.number_input("PUT: delta m√≠nimo", min_value=0.0, max_value=1.0, value=0.20, step=0.01, format="%.2f", help="Delta m√≠nimo em valor absoluto")

            submitted = st.form_submit_button("Buscar sugest√µes")

        params = {
            "ticker": ticker,
            "min_volume": int(min_volume),
            "min_days": int(min_days),
            "max_days": int(max_days),
            "call_min_distance_pct": float(call_min_distance),
            "call_max_delta": float(call_max_delta),
            "put_max_distance_pct": -float(put_max_distance),  # Converter para negativo
            "put_min_delta": -float(put_min_delta),  # Converter para negativo
        }
        return submitted, params


    def render_results(ticker: str, df: pd.DataFrame) -> None:
        if df.empty:
            st.info("Nenhuma op√ß√£o encontrada nos crit√©rios atuais.")
        else:
            st.subheader(f"Sugest√µes para {ticker}")
            
            # Configura√ß√£o de colunas com tooltips
            column_config = {
                "Prob. Exerc√≠cio (%)": st.column_config.NumberColumn(
                    "Prob. Exerc√≠cio (%)",
                    help="Probabilidade de exerc√≠cio: <5% baixo risco, 5-15% moderado, >15% alto risco",
                    format="%.0f%%"
                ),
                "Retorno (%)": st.column_config.NumberColumn(
                    "Retorno (%)",
                    help="Retorno no per√≠odo. CALL: sobre pre√ßo da a√ß√£o | PUT: sobre strike",
                    format="%.2f%%"
                ),
                "Retorno a.a. (%)": st.column_config.NumberColumn(
                    "Retorno a.a. (%)",
                    help="Retorno anualizado para comparar com dividendos reais",
                    format="%.1f%%"
                ),
                "Pr√™mio (R$)": st.column_config.NumberColumn(
                    "Pr√™mio (R$)",
                    help="Valor recebido pela venda da op√ß√£o",
                    format="R$ %.2f"
                ),
                "Strike": st.column_config.NumberColumn(
                    "Strike",
                    help="Pre√ßo de exerc√≠cio da op√ß√£o",
                    format="R$ %.2f"
                )
            }
            
            st.dataframe(df, use_container_width=True, column_config=column_config)


    # L√≥gica principal da aba Dividendos Sint√©ticos
    submitted, params = render_params_form()
    if not submitted:
        st.caption("Configure as vari√°veis OPLAB_API_* no ambiente antes de buscar.")
    else:
        try:
            client = OpLabClient()
            
            # Primeiro verifica se o ticker tem op√ß√µes dispon√≠veis
            option_chain = client.get_option_chain(params["ticker"])
            if option_chain.empty:
                st.warning(f"‚ö†Ô∏è {params['ticker']} n√£o possui op√ß√µes negociadas na B3.")
                st.info("üí° Tente tickers com maior liquidez como: PETR4, VALE3, ITUB4, BBDC4, BBAS3")
            else:
                df = find_synthetic_dividend_options(
                    params["ticker"],
                    client=client,
                    min_volume=params["min_volume"],
                    min_days=params["min_days"],
                    max_days=params["max_days"],
                    call_min_distance_pct=params["call_min_distance_pct"],
                    call_max_delta=params["call_max_delta"],
                    put_max_distance_pct=params["put_max_distance_pct"],
                    put_min_delta=params["put_min_delta"],
                )
                render_results(params["ticker"], df)
        except Exception as e:
            st.error(f"Erro: {e}")

with tab2:
    render_direction_radar_page()